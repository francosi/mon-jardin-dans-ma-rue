//Creer un repository:
//Se positionner dans le repertoire et faire:
git init

//Ajouter un fichier à l'index:
git add nom_fichier

//Ajouter tous les fichiers du repertoire:
git add .

//Commiter tous les fichier du repository qui sont dans l'index.
git commit -m "message qui decrit les modifications"

//Voir le status du repository (est ce que tous les fichier on bien été indexés ou commités)
git status

//Voir le l'historique des modifications:
git log

//Se positionner sur un ancien commit.

git checkout numero_du_cha_recuperer_dans_lhistorique

//Se positionner sur le dernier commit

git checkout master

//pour visualiser les depots distants:
git remote -v

//Faire un remote (j'ecris du code, ensuite je le commite en local ensuite je l'envois vers un remote)

git push origin master

//recuperer un repository de githup en local
//Se positionner sur la page du repository sur github et sur la droite cliquer HTTPS puis copier l'URL du projet
//Ensuite retourner dans la console git, creer un repertoire et faire:

git clone url_du_repository

//Ajouter un remote (github) qui recupere le projet local (on passe l'url du projet github)

git remote add origin https://github.com/francosi/mon-jardin-dans-ma-rue.git
git push -u origin master

//recuperer le code depuis git hub
git clone URL

//recuperer les derniere modifications de github (modif faites par un autre contributeur).
git pull origin master

//Afficher les branches du projet (une * est  placé devant la branch courante)
git branch

//Creer une branche
git branche nom-de-la-branche

//changer de branches
git checkout nom-de-la-branche-cible


//Fusionner deux branches (rammener la branche nom-branche dans master)
//se positionner sur la branche master et faire:
git merge nom-branche

//Voir tous les commit d'un fichier
git blame nom-du-fichier

//ignorer un fichier (par ex. log , temp, configuration) que l'on ne veut pas avoir dans git.
Creer un fichier qui s'appelle .gitignore dans lequel on place le nom des fichier à ignorer.

//Contribuer à un projet open source.
Aller sur le projet en question et faire un fork (bouton fork en haut a droite). 
L'effet de cette commande est de copier le projet sur mon propre espace github. 
Ensuite je peux faire un git clone pour le recuperer sur ma machine locale.



//Remove directory from git and local

//You could checkout 'master' with both directories;

git rm -r one-of-the-directories
git commit -m "Remove duplicated directory"
git push origin master

//Remove directory from git but NOT local
//As mentioned in the comments, what you usually want to do is remove this directory from git but not delete it entirely from the filesystem (local)
//In that case use:

git rm -r --cached myFolder



 //sortir du mode log
 Taper :q
 

